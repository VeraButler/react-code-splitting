{"version":3,"sources":["components/Page1.js","components/AsyncComponent.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Page1","_ref","onRouteChange","react_default","a","createElement","className","src","logo","alt","onClick","asyncComponent","importComponent","_Component","AsyncComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","component","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","default","setState","stop","apply","arguments","Component","App","route","components_Page1","AsyncPage2","__webpack_require__","e","then","bind","AsyncPage3","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","p"],"mappings":"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","file":"static/js/main.4736cba5.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nconst Page1 = ({ onRouteChange }) =>\r\n    <div className='app'>\r\n        <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n           <h1>Welcome to Page 1</h1>\r\n        </header>\r\n        <button className=\"disabled\">Page1</button>\r\n        <button onClick={() => onRouteChange('Page2')}>Page2</button>\r\n        <button onClick={() => onRouteChange('Page3')}>Page3</button>\r\n    </div>\r\n\r\nexport default Page1;","import React, { Component } from 'react';\r\n\r\n// Create a higher order component - returns another component\r\n// wrapper for code splitting; asnyc loading of component\r\n\r\nexport default function asyncComponent(importComponent) {\r\n    class AsyncComponent extends Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.state = {\r\n                component: null\r\n            }\r\n        }\r\n\r\n        async componentDidMount() {\r\n            const { default: component } = await importComponent();\r\n            this.setState({\r\n                component: component\r\n            })\r\n        }\r\n\r\n        render() {\r\n            const Component = this.state.component;\r\n            return Component ? <Component {...this.props} /> : null;\r\n        }\r\n    }\r\n    return AsyncComponent;\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Page1 from './components/Page1';\r\nimport AsyncComponent from './components/AsyncComponent';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            route: 'Page1',\r\n            component: null\r\n        }\r\n    }\r\n    // no need to bind with arrow functions\r\n    onRouteChange = (route) => {\r\n        // no code splitting, use asyncComponent for splitting\r\n        this.setState({ route: route })\r\n\r\n        // pure code splitting\r\n        //if (route === 'page1') {\r\n        //    this.setState({ route: route })\r\n        //} else if (route === 'page2') {\r\n        //    import('./components/page2').then((Page2) => {\r\n        //        this.setState({ route: route, component: Page2.default })\r\n        //    })\r\n        //} else if (route === 'page3') {\r\n        //    import('./components/page3').then((Page3) => {\r\n        //        this.setState({ route: route, component: Page3.default })\r\n        //    })\r\n        //}\r\n    }\r\n    render() {\r\n        if (this.state.route === 'Page1') {\r\n            return <Page1 onRouteChange={this.onRouteChange} />\r\n        } else if (this.state.route === 'Page2') {\r\n            const AsyncPage2 = AsyncComponent(() => import('./components/Page2'));\r\n            return <AsyncPage2 onRouteChange={this.onRouteChange} />\r\n        } else if (this.state.route === 'Page3') {\r\n            const AsyncPage3 = AsyncComponent(() => import('./components/Page3'));\r\n            return <AsyncPage3 onRouteChange={this.onRouteChange} />\r\n        }\r\n        //    if (this.state.route === 'page1') {\r\n        //        return <Page1 onRouteChange={this.onRouteChange} />\r\n        //    } else {\r\n        //        return <this.state.component onRouteChange={this.onRouteChange} />\r\n        //    }\r\n        //}\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}